{"version":3,"sources":["components/search-bar.js","components/movie-detail.js","components/movie-video.js","components/movie-list-item.js","containers/movie-list.js","containers/app.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lockRequestCall","intervalBeforeRequest","searchText","react_default","a","createElement","className","onKeyUp","handleChange","bind","type","placeholder","e","setState","target","value","setTimeout","search","inputText","callBackRequest","Component","MovieDetail","_ref","title","description","MovieVideo","videoId","src","concat","MovieListItem","onClick","callBackMovieClick","movie","width","height","poster_path","alt","MovieList","movies","map","movie_list_item","key","id","API_END_POINT","API_KEY","App","currentMovie","isSearch","initMovies","axios","get","then","response","data","results","slice","applyVideoToCurrentMovie","videos","youtube_key","currentMovieWithVideo","setRecommendation","textSearch","updateAfterSearch","_this2","length","nextProps","nextState","_this3","search_bar","searchMovie","movie_video","movie_detail","overview","movie_list","Boolean","window","location","hostname","match","ReactDOM","render","app","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.760a9b9c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass SearchBar extends Component {\n    constructor (props) {\n        super(props)\n        this.state ={\n            lockRequestCall:false,\n            intervalBeforeRequest:1000,\n            searchText:\"\",\n            };\n    }\n    render () {\n        return (\n            <div className=\"row\">\n                <div className=\"col-lg-8\">\n                     <input onKeyUp={this.handleChange.bind(this)} type=\"text\" className=\"form-control input-lg\" placeholder=\"Rechercher un film...\" />\n                </div>\n            </div>\n        )\n    }\n\n  handleChange(e) {\n      this.setState({searchText:e.target.value});\n      if(!this.state.lockRequestCall){\n        this.setState({lockRequestCall:true})\n        setTimeout(function() { this.search(this.state.searchText) }.bind(this), this.state.intervalBeforeRequest);\n      }\n  }\n\n\nsearch(inputText){\n    this.setState({lockRequestCall:false});\n    this.props.callBackRequest(inputText);\n}\n \n}\n\nexport default SearchBar","\nimport React  from 'react'\n\nconst MovieDetail = ({title,description}) => {\n        return (\n            <div>\n                <h1>{title}</h1>\n                <p>{description}</p>\n            </div>\n        )\n}\n\nexport default MovieDetail","import React from 'react'\nconst BASE_URL=\"https://www.youtube.com/embed/\";\n\nconst MovieVideo = ({videoId}) => {\n        return (\n            <div className=\"embed-responsive embed-responsive-16by9\">\n                <iframe className=\"embed-responsive-item\" src={`${BASE_URL}${videoId}`}></iframe>\n            </div>\n        );\n}\n\nexport default MovieVideo","import React from 'react'\nconst IMAGE_BASE_URL = \"https://image.tmdb.org/t/p/w500/\";\n\nconst MovieListItem = (props) => {\n\n    return (\n        <div onClick={handleClick.bind(this)}>\n           \n           <li className=\"list-group-item\">\n            <div className=\"media\">\n                <div className=\"media-left\">\n                    <img className=\"media-object img-rounded\" width=\"100px\" height=\"100px\" src={`${IMAGE_BASE_URL}${props.movie.poster_path}`} alt=\"...\"/>\n                </div>\n                <div className=\"media-body\">\n                    <h5 className=\"title_list_item\">{props.movie.title}</h5>\n                </div>\n            </div>\n            </li> \n        </div>\n    )\n  \n\nfunction handleClick(){\n      props.callBackMovieClick(props.movie);\n  }\n}\n\n\n\nexport default MovieListItem","import React from 'react'\nimport MovieListItem from '../components/movie-list-item'\n\nconst MovieList = (props) => {\n    return (\n        <div>\n             <h3 className=\"title_list_item_title\">Vous aimerez aussi ...</h3>\n            <ul className=\"list-group\">\n               {props.movies.map(movie => {\n                  return <MovieListItem key={movie.id} movie={movie} callBackMovieClick={callBackMovieClick} /> \n               })}\n            </ul>\n        </div>\n    ) \n    function callBackMovieClick(movie){\n        props.callBackMovieClick(movie);\n    }\n}\n\nexport default MovieList","import React, { Component } from 'react'\nimport axios from 'axios'\nimport _ from 'lodash'\nimport SearchBar from '../components/search-bar'\nimport MovieDetail from '../components/movie-detail'\nimport MovieVideo from '../components/movie-video'\nimport MovieList from './movie-list'\n\nconst API_END_POINT = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"22fbee058eb254936ed63ba4a6b590ad\";\nconst DEFAULT_TYPE_SEARCH =\"discover\";\nconst DEFAULT_PARAM = \"language=fr&include_adult=false\";\n\nclass App extends Component {\n\n    constructor (props) {\n        super(props)\n        this.state = ({\n            movies:[],\n            currentMovie:{},\n            isSearch:false\n        })\n    }\n    \n    componentWillMount () {\n       this.initMovies();\n    }\n    \n    initMovies(){\n        const request = axios.get(`${API_END_POINT}${DEFAULT_TYPE_SEARCH}/movie?api_key=${API_KEY}&sort_by=popularity.desc&${DEFAULT_PARAM}`).then(function(response){\n        this.setState({\n            movies:response.data.results.slice(1,6),\n            currentMovie:response.data.results[0]\n        }, function() {\n              this.applyVideoToCurrentMovie();\n        });\n      \n        }.bind(this));\n    }\n   \n\n   applyVideoToCurrentMovie(){\n        const request = axios.get(`${API_END_POINT}movie/${this.state.currentMovie.id}?api_key=${API_KEY}&append_to_response=videos&include_adult=false`).then(function(response){\n            if(response.data.videos.results[0] && response.data.videos.results[0].key){ \n                 const youtube_key =response.data.videos.results[0].key;\n                 let currentMovieWithVideo = this.state.currentMovie;\n                 currentMovieWithVideo.videoId = youtube_key;\n                 this.setState({currentMovie:currentMovieWithVideo});\n            }\n        }.bind(this));\n    }\n\ncallBackMovieClick(movie){\n    this.setState({currentMovie:movie}, function() {\n         this.applyVideoToCurrentMovie();\n         this.setRecommendation();\n    });\n}\n\n searchMovie(textSearch){\n     if(textSearch){\n        const request = axios.get(`${API_END_POINT}search/movie?api_key=${API_KEY}&${DEFAULT_PARAM}&query=${textSearch}`).then(function(response){\n           //si on trouve des données\n            if(response.data && response.data.results[0]){\n                //si le film trouvé est différent de l'actuel\n                if(response.data.results[0].id!==this.state.currentMovie.id){\n                    this.updateAfterSearch(response);\n                }\n            }\n        }.bind(this));\n    }\n  }\n\nupdateAfterSearch(response){\n    this.setState({currentMovie:response.data.results[0]}, () => {\n          this.applyVideoToCurrentMovie();\n          this.setRecommendation();\n    }); \n}\n\nsetRecommendation(){    \n     const request = axios.get(`${API_END_POINT}movie/${this.state.currentMovie.id}/recommendations?api_key=${API_KEY}&language=fr`).then(function(response){\n        if(response.data && response.data.results.length>5){\n            this.setState({movies:response.data.results.slice(1,6)});\n       }\n     }.bind(this)); \n}\nshouldComponentUpdate (nextProps, nextState) {\n    if(!nextState.currentMovie.videoId){\n        return false;\n    }else{\n        return true;\n    }\n}\n\n render () {  \n       const renderMovieList = () => {\n           if(!this.state.movies>=5){return <div>Chargement</div>}\n           return <MovieList movies={this.state.movies} callBackMovieClick={this.callBackMovieClick.bind(this)} />\n       }\n       const renderMovie = () => {\n           if(this.state.currentMovie.videoId)\n                return (<div><MovieVideo videoId={this.state.currentMovie.videoId}/><MovieDetail title={this.state.currentMovie.title} description={this.state.currentMovie.overview}/></div>) ;  \n            else\n                return <div>Pas de donnée</div> ;  \n        }               \n        return ( \n            <div>\n                <div className=\"search_bar\">\n                    <SearchBar callBackRequest={this.searchMovie.bind(this)}/>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-8\">\n                        {renderMovie()}\n                    </div>\n                    <div className=\"col-md-4\">\n                        {renderMovieList()}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    \n}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.querySelector('.container'));\n\nserviceWorker.unregister();\n\n\n\n\n\n"],"sourceRoot":""}